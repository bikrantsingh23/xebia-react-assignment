{"version":3,"sources":["components/Login/Login.js","components/ProductListing/ProductListing.js","App.js","serviceWorker.js","components/ErrorBoundary/ErrorBoundary.js","index.js"],"names":["Login","loginHandler","event","preventDefault","className","onSubmit","this","type","placeholder","value","Component","ProductListing","App","path","exact","component","Boolean","window","location","hostname","match","ErrorBoundary","state","error","errorinfo","setState","src","alt","props","children","React","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"qTAkCeA,G,MA/Bf,4MAEIC,aAAe,SAACC,GACZA,EAAMC,kBAHd,uDAOQ,OACI,yBAAKC,UAAU,kBACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,qBACX,wBAAIA,UAAU,iBAAd,UAEJ,yBAAKA,UAAU,aAAf,uCAGA,yBAAKA,UAAU,YACX,0BAAMC,SAAUC,KAAKL,cACjB,2BAAOG,UAAU,aAAaG,KAAK,OAAOC,YAAY,aACtD,6BACA,2BAAOJ,UAAU,aAAaG,KAAK,WAAWC,YAAY,aAC1D,6BACA,2BAAOD,KAAK,SAASH,UAAU,eAAeK,MAAM,kBAtBhF,GAA2BC,cCSZC,EAVf,uKAEQ,OACI,6BACI,oDAJhB,GAAoCD,aCgBrBE,MAbf,WACE,OACE,yBAAKR,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOS,KAAK,IAAIC,OAAK,EAACC,UAAWf,IACjC,kBAAC,IAAD,CAAOa,KAAK,YAAYC,OAAK,EAACC,UAAWJ,QCC/BK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICKSC,E,4MApBXC,MAAQ,CAAEC,MAAO,KAAMC,UAAW,M,gEAChBD,EAAOC,GACrBlB,KAAKmB,SAAS,CACVF,MAAOA,EACPC,UAAWA,M,+BAIf,OAAIlB,KAAKgB,MAAME,UAEP,yBAAKpB,UAAU,OACX,qDACA,yBAAKsB,IAAI,eAAeC,IAAI,YAIjCrB,KAAKsB,MAAMC,a,GAjBEC,IAAMpB,WCKlCqB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SFsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnB,GACLoB,QAAQpB,MAAMA,EAAMqB,c","file":"static/js/main.9e08d634.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './Login.css';\r\n\r\nexport class Login extends Component {\r\n\r\n    loginHandler = (event) => {\r\n        event.preventDefault();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"login-main-div\">\r\n                <div className=\"login-inner-div\">\r\n                    <div className=\"login-heading-div\">\r\n                        <h1 className=\"login-heading\">sCart</h1>\r\n                    </div>\r\n                    <div className=\"alert-div\">\r\n                        Username and Password is incorrect.\r\n                </div>\r\n                    <div className=\"form-div\">\r\n                        <form onSubmit={this.loginHandler}>\r\n                            <input className=\"text-input\" type=\"text\" placeholder=\"username\" />\r\n                            <br />\r\n                            <input className=\"text-input\" type=\"password\" placeholder=\"password\" />\r\n                            <br />\r\n                            <input type=\"submit\" className=\"login-button\" value=\"Login\" />\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Login\r\n","import React, { Component } from 'react';\r\n\r\nexport class ProductListing extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Product Listing</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ProductListing\r\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Login from './components/Login/Login'\nimport ProductListing from './components/ProductListing/ProductListing'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact component={Login} />\n          <Route path=\"/products\" exact component={ProductListing} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    state = { error: null, errorinfo: null }\r\n    componentDidCatch(error, errorinfo) {\r\n        this.setState({\r\n            error: error,\r\n            errorinfo: errorinfo\r\n        })\r\n    }\r\n    render() {\r\n        if (this.state.errorinfo) {\r\n            return (\r\n                <div className=\"App\">\r\n                    <h2>Something Not Working</h2>\r\n                    <img src=\"./repair.jpg\" alt=\"repair\" />\r\n                </div>\r\n            )\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport ErrorBoundary from './components/ErrorBoundary/ErrorBoundary';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ErrorBoundary>\n      <App />\n    </ErrorBoundary>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}